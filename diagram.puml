@startuml
class transactionProject.exceptions.CurrencyException {
}
class transactionProject.model.Client {
+ {static} String F_NAME_COLUMN
+ {static} String L_NAME_COLUMN
+ {static} String PASSPORT_NUMBER_COLUMN
- String firstName
- String lastName
- String passportNumber
+ String getColumns()
+ String getDate()
}
class transactionProject.exceptions.DataFormatException {
}
class transactionProject.database.CurrentConnection {
- String NAME_USER
- String PASSWORD
- String URL
- Connection connection
- Statement statement
- {static} CurrentConnection instance
+ {static} CurrentConnection getInstance()
+ void createDatabase(String)
+ void createTable(String,String)
+ void addNote(String,String,String)
+ ResultSet getTableData(String)
+ int findFieldSignificance(String,String,String,String)
+ String findFieldSignificance(String,String,String,int)
+ String transaction(String)
}
class transactionProject.model.Account {
+ {static} String CLIENT_ID_COLUMN
+ {static} String NUMBER_COLUMN
+ {static} String OPEN_DATE_COLUMN
+ {static} String TYPE_COLUMN
+ {static} String CURRENCY_COLUMN
+ {static} String MONEY_COLUMN
- int clientId
- String number
- LocalDate openDate
- String type
- String currency
- Float money
+ String getColumns()
+ String getDate()
}
class transactionProject.exceptions.BalanceException {
}
interface transactionProject.model.Tabular {
~ String getColumns()
~ String getDate()
}
class transactionProject.model.builders.ClientBuilder {
- String firstName
- String lastName
- String passportNumber
+ ClientBuilder setFirstName(String)
+ ClientBuilder setLastName(String)
+ ClientBuilder setPassportNumber(String)
+ Client build()
}
class transactionProject.model.Operation {
+ {static} String OUTPUT_ACCOUNT_ID_COLUMN
+ {static} String INPUT_ACCOUNT_ID_COLUMN
+ {static} String MONEY_COLUMN
+ {static} String DATE_COLUMN
+ {static} String TIME_COLUMN
+ {static} String STATUS_COLUMN
+ {static} int QUANTITY_OF_COLUMNS
- int outputAccountId
- int inputAccountId
- Float money
- LocalDate date
- LocalTime time
- String status
+ void setStatus(String)
+ String getColumns()
+ String getDate()
+ int getOutputAccountId()
+ int getInputAccountId()
+ Float getMoney()
+ String getStatus()
}
class transactionProject.exceptions.InputException {
}
enum transactionProject.RegularExpressions {
+  ACCOUNT_NUMBER
+  MONEY
+  PASSPORT_NUMBER
+  NAME
+ Pattern getPattern()
}
class transactionProject.database.DBActions {
+ {static} String DBNAME
+ {static} String CLIENTS_TABLE_NAME
+ {static} String ACCOUNTS_TABLE_NAME
+ {static} String OPERATIONS_TABLE_NAME
+ {static} String ID_COLUMN
- CurrentConnection connection
- {static} DBActions instance
+ void createDatabase()
+ void createTables()
+ {static} DBActions getInstance()
+ void addClient(Client)
+ void addAccount(Account)
+ void addOperation(Operation)
+ int findAccountId(String)
+ int findClientId(String)
+ String getReportText()
- int getClientIdByAccountId(int)
- String getNameById(int)
+ void compareCurrency(int,int)
+ void compareAmounts(int,float)
+ String transaction(int,int,float)
}
class transactionProject.Program {
- {static} File directory
- {static} String[] files
- {static} ArrayList<Operation> operations
- {static} DBActions databaseConnection
- {static} String REPORT_FILE_PASS
+ {static} void main(String[])
- {static} void setDirectory(String[])
- {static} void parseFiles()
- {static} void checkStringFormat(String,Pattern)
+ {static} HashMap<String,String> setData(String)
+ {static} int setInt(String,Predicate<Integer>)
+ {static} float setFloat(String,Predicate<Float>)
- {static} Client setClient()
- {static} Account setAccount()
- {static} void setReport()
}
class transactionProject.Program$JsonOperation {
+ String outputAccountNumber
+ String inputAccountNumber
+ float money
}
class transactionProject.model.builders.AccountBuilder {
- int clientId
- String number
- String type
- String currency
- Float money
+ AccountBuilder setClientId(int)
+ AccountBuilder setNumber(String)
+ AccountBuilder setType(String)
+ AccountBuilder setCurrency(String)
+ AccountBuilder setMoney(Float)
+ Account build()
}


transactionProject.exceptions.Exception <|-- transactionProject.exceptions.CurrencyException
transactionProject.model.Tabular <|.. transactionProject.model.Client
transactionProject.exceptions.Exception <|-- transactionProject.exceptions.DataFormatException
transactionProject.model.Tabular <|.. transactionProject.model.Account
transactionProject.exceptions.Exception <|-- transactionProject.exceptions.BalanceException
transactionProject.model.Tabular <|.. transactionProject.model.Operation
transactionProject.exceptions.RuntimeException <|-- transactionProject.exceptions.InputException
transactionProject.Program +.. transactionProject.Program$JsonOperation
@enduml